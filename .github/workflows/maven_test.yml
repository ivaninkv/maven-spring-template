# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TARGET_FOLDER: /app/app-name

jobs:
  build:
    runs-on: ubuntu-latest
    environment: TEST
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven
        run: mvn -B -P github package --file pom.xml

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Copy compose file to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: compose-deploy-test.yml
          target: ${{ env.TARGET_FOLDER }}

      - name: Generate .env file and deploy docker stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo DB_URL=${{ secrets.FIRST_VAR }} > ${{ env.TARGET_FOLDER }}/.env
            echo BOT_ADMINS=${{ secrets.SECOND_VAR }} >> ${{ env.TARGET_FOLDER }}/.env
            env $(cat ${{ env.TARGET_FOLDER }}/.env | grep ^[A-Z] | xargs) \
                docker stack deploy -c ${{ env.TARGET_FOLDER }}/compose-deploy-test.yml jtg-bot-test
